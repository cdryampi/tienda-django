name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.6'

      - name: Install system dependencies for Pillow
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libjpeg-dev \
            zlib1g-dev \
            libtiff-dev \
            libfreetype6-dev \
            liblcms2-dev \
            libwebp-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            tcl-dev \
            tk-dev

      - name: Install getText
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gettext
  
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do sleep 1; done

      - name: Run Django tests
        env:
          DJANGO_SETTINGS_MODULE: tienda.settings
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

        run: |
          python manage.py migrate

      - name: Create initial data
        run: python manage.py create_initial_data

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Asegura que el job de test pase antes de hacer el deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      - name: Prepare permissions before pull
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            sudo chown -R ubuntu:www-data /home/ubuntu/tienda-django/media/
            sudo chmod -R 775 /home/ubuntu/tienda-django/media/
            sudo rm -f /home/ubuntu/tienda-django/.env
          EOF
      - name: Generate .env file on the server
        run: |
            ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > /home/ubuntu/tienda-django/.env
              echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> /home/ubuntu/tienda-django/.env
              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> /home/ubuntu/tienda-django/.env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/ubuntu/tienda-django/.env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /home/ubuntu/tienda-django/.env
              echo "FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}" >> /home/ubuntu/tienda-django/.env
              echo "FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}" >> /home/ubuntu/tienda-django/.env
              echo "STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}" >> /home/ubuntu/tienda-django/.env
              echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> /home/ubuntu/tienda-django/.env
              echo "DEBUG=${{ secrets.DEBUG }}" >> /home/ubuntu/tienda-django/.env
            EOF
        


      - name: Deploy to EC2
        run: |
            ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            
              # Matar cualquier proceso de npm que esté corriendo
              pkill -f "node" || true
  
              cd /home/ubuntu/tienda-django
              git pull origin main
              source /home/ubuntu/venv/bin/activate
              pip install -r requirements.txt
              python manage.py compilemessages
              python manage.py migrate
  
              # Construcción de Vite (sin npm run dev)
              cd vitefront
              npm install
              npm run build
              cd ..
  
              # Copiar archivos estáticos de Vite a Django
              python manage.py collectstatic --noinput --clear
              python manage.py create_initial_data
  
            EOF

      - name: Restore permissions after pull and restart Gunicorn
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            sudo chown -R www-data:www-data /home/ubuntu/tienda-django/media/
            sudo chown -R www-data:www-data /home/ubuntu/tienda-django/staticfiles/
            sudo chmod -R 775 /home/ubuntu/tienda-django/media/
            sudo chmod -R 775 /home/ubuntu/tienda-django/staticfiles/
            sudo chmod +x /home/ubuntu/tienda-django/scripts/reiniciar.sh
            cd /home/ubuntu/tienda-django/scripts
            ./reiniciar.sh
          EOF
